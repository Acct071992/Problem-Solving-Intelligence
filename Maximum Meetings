/* Maximum Meetings (in a room)
   You are given the schedule of N meetings with their start time Start[i] and end time End[i]. But you have only 1 meeting room. 
   So, you need to find the meeting numbers you can organize in the given room, such that the number of meetings organized is maximum.

Note: The start time of one chosen meeting canâ€™t be equal to the end time of the other chosen meeting. 
Also, for the same end time, a meeting with a smaller index is preferred.

Print the meeting numbers (Consider 1-based indexing) you organized in the given room, in the order in which you organized them such that 
the number of meetings is maximum.

We will first take an example to understand what is required to be done.

Example -

N = 6

Start[] = {1, 3, 0, 5, 8, 5}

End[]  =  {2, 4, 6, 7, 9, 9}

Expected Output - 

1 2 4 5

Maximum 4 meetings can be scheduled in one room. Meeting number 1 from 1 to 2, Meeting number 2 from 3 to 4, Meeting number 4 from 5 to 7, 
and Meeting number 5 from 8 to 9.

Sample Input 1:
2
6
1 3 0 5 8 5
2 4 6 7 9 9
3
1 1 1
4 5 9
Sample Output 1:
1 2 4 5
1
Explanation For Sample Input 1:
For test case 1: 
You can organize a maximum of 4 meetings. Meeting number 1 from 1 to 2, Meeting number 2 from 3 to 4, Meeting number 4 from 5 to 7, 
and Meeting number 5 from 8 to 9.

For test case 2:
As all meetings have the same start time, you can organize only 1 meeting in the room.
Sample Input 2:
2
5
0 7 1 4 8
2 9 5 9 10
3
1 2 3
4 4 4
Sample Output 2:
1 2 
1
*/

Approach:
   Greedy: as to complete a meeting we just need end time, so whichever meeting has lowest end time would be taken first and then least from remaining and so on.
   So we can sort the meetings based on their endtimes.
   on equal cases we will give precedence to the first come first server meeting or index in short.
   
#include<vector>
#include<algorithm>
static vector<int> maximumMeetings(vector<int> &start, vector<int> &end) {
    int n = start.size();
    vector<pair<int,pair<int,int>>>intervals(n);
    for(int i=0;i<n;++i){
      intervals[i] = { end[i], {i+1, start[i]} };
    }
    sort(intervals.begin(), intervals.end());
    vector<int>ans;
    ans.push_back(intervals[0].second.first);
    int prevEnd = intervals[0].first;
    for (int i=1;i<n;++i){
        auto &pr = intervals[i];
        if(prevEnd < pr.second.second){
            ans.push_back(pr.second.first);
            prevEnd = pr.first;
        }
    }
    return ans;
}

//T.C. : O(N * logN)  : as for sorting
//S.C. : O(N)  : for extra interval array created.
