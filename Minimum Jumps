/* Minimum Jumps
given array where arr[i] -> max distance of jump.
starting from 0 you have to reach n-1, with minimum jumps.
if not possible then return -1

Sample Input 1:
2
5
2 1 3 2 4
3
3 2 1
Sample Output 1:
2
1
Explanation For Sample Input 1:
In the 1st test case, Bobs jumps from shop 0 to shop 2 and then jumps from shop 2 to shop 4, so he needs two jumps to reach the last shop.

In the 2nd test case, Bobs jumps from shop 0 to shop 2, so he needs only one jump to reach the last shop.
Sample Input 2:
2
5
1 0 3 2 1
4
1 1 1 1
Sample Output 2:
-1
3
*/

Approach: 
1st : recursive, try every jumps and carry on. as we don't know which cell can have bigger jump and you miss that, just like local maxima problem, 
      you can't rely on local maxima here max distance available in jump range. let's say arr[i] = 3 , you would say directly jump to i+3.
      No!. it would seem that it will take you closer to n-1 but who know instead of i+3 , arr[i+1] is having very big jump.

2nd : DP on above, would make it solve in O(N^2)

3rd: greedy but perfect, as we need to reach n-1, so if we are at any position starting from 0th , we are reachable to destPoint then that 
     ans would be considerable. as we are not actually jumping and checking. But we are checking if jump from ith pos, it is possible to reach/cross cur
     destpoint. if not found then no possible answer, but if found: new destPoint will be current pos/index. increase count accordingly.
     This way we need not to perform extra ops to get the optimized/min jumps.
    
#include<bits/stdc++.h>
int minimumJumps(vector<int> &arr, int n)
{
    int ans = 0;
    for(int i=n-1;i>0;){
        int j=0;
        while(j<i && j+arr[j] < i){
            ++j;
        }
        if(j>=i) return -1;
        ++ans;
        i=j;
    }
    return ans;
}

// T.C. : O(N)
// S.C. : O(1)
