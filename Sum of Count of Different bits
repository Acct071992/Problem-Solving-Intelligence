/* Sum of Count of Different bits 
A function f(a,b) equals number of bits two numbers a and b differ in the base 2 representation. Given a set of numbers in an array A [1, 3, 5], find the sum of f(i,j) over all pairs of numbers.

Example: [1,3,5]
f(1,3) = 01, 11 -> 1 = f(3,1)
f(3,5) = 11, 101 ->2 = f(5,3)
f(5,1) = 101, 001 ->1 = f(1,5)
Sum = 1 + 2 + 1 = 4 and for all pairs 4*2 = 8
*/

Approach:
brute force: check for all unique pairs and sum of all counts * 2 will be the ans. T.C. : O(N^2 * logN) (logN -> for counting set bits of a number)
Optimized: at each bit places, only 2 possibilities (0/1 or even or odd), so exculsive case for every bit, hence total number will be 
(for a single bit place) = even count * odd count; (this will save the pairwise traversal) hence left with O(N) for single traversal and logN for bit count
hence O(N*logN)

#include <bits/stdc++.h>
#define mod 1000000007
int differentBitsSumPairwise(vector<int> &arr, int n)
{
    int64_t ans = 0, freqOdd, freqEven;
    for(int k=0;k<32;++k){
        freqOdd = freqEven = 0;
        for(int i=0;i<n;++i){
            if(arr[i]%2) ++freqOdd;
            else ++freqEven;
            arr[i] >>= 1;
        }
        ans = (ans + (freqOdd * freqEven)%mod) % mod;
    }
    return (ans*2)%mod;
}

// T.C. : O(N*logN)
// S.C. : O(1)
