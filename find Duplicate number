/*
Find the Duplicate Number
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
  Input: nums = [1,3,4,2,2]
  Output: 2

Example 2:
  Input: nums = [3,1,3,4,2]
  Output: 3 

Constraints:
  1 <= n <= 105
  nums.length == n + 1
  1 <= nums[i] <= n
  All the integers in nums appear only once except for precisely one integer which appears two or more times.
*/

Approach 1:  will modify the array and revert back. without extra space
    As the numbers lies in range: [1,n], and input size is n+1, hence current array can be used as table.
    while traversing the array, will change the value at index (= value at current index, newIdx = input[i]) to -ve of current at that/new index.
    if doing so we jump on an index having already negative value, then we reached this index again. hence this new index of input[i] is duplicate

    int findDuplicate(vector<int>& nums) {
        int n = nums.size() - 1;
        for(int i=0;i<=n;++i){
            int x = abs(nums[i]);
            if(nums[x] < 0) return x;
            nums[ x ] = -nums[ x ]; 
        }
        return -1;
    }

  // T. C. : O(N)
  // S. C. : O(1)

Appraoch 2: slow fast pointer.
    as element lies in the range [1,n] and input size is n+1, So we can freely roam around in the input by accessing it's value at index and jumping to index
    found at this index, as value repeats so gonna stuck in loop.
    This situation is similiar to loop detection in linked list and getting the starting of looped portion in Linked List.

    int findDuplicate(vector<int>& nums) {
        int slow = 0, fast = 0;
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while(slow != fast);
        
        slow = 0;
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }  
// And we didn't need to modify the input

// T.C. : O(N)
// S.C. : O(1) 
