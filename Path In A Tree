/* Given a Binary Tree and integer X. find the path from root till node having value X.
data sets won't have duplicates

-1 -> NULL
input
2
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
7
3 2 1 -1 -1 -1 -1
1
Sample Output 1 :
1 3 7
3 1

Approach:
traverse the tree by calling left and right subtree while on a node, add to ans vector.
return true on finding the X. on backward journey check if the current pushed node is elligible in path or not by return value from their subtree.
if got true from any of the subtree call then no pop else pop.

#include <bits/stdc++.h> 
bool help(TreeNode<int>*root, int x, vector<int>&ans){
    if(!root) return false;
    if(root->data == x){
        ans.push_back(x);
        return true;
    }
    ans.push_back(root->data);
    if(!help(root->left,x,ans) && !help(root->right,x,ans)){
        ans.pop_back();
        return false;
    }
    return true;
}
vector<int> pathInATree(TreeNode<int> *root, int x)
{
    vector<int>ans;
    help(root,x,ans);
    return ans;
}

// T.C.: O(N)
// S.C.: O(1) (won't include ans vector as that was intended to return and generally extra space used is asked)
