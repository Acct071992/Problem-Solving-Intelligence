/*
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5
*/

Approach 1 :
  collect/merge all the elements from both arrray till (n1+n2)/2. So that's the ans in the mid.
  S.C. : O(N)  T.C. : O(n1+n2)/2

Approach 2 :
  As we are interested in mid element in case of odd (n1+n2) and potential 2 mid numbers in case of even.
  If we could hunt a partition point in an array, which having potential to be mid element in total merge sorted, then we found it.
  To find it we must maintain, p1(number of elements from starting of array1) and p2(number of elements from starting of array2) should be in total equal to (n1+n2)/2.
  a1 b1 c1 d1 e1 f1 g1
  a2 b2 c2 d2 e2 f2 g2 h2
  n1 = 7
  n2 = 8
  n1 + n2 = 15 ,  let's p1 = 3 then p2 = (n1+n2+1)/2 - p1 -> 5 ( odd (15), so mid will be included in p1 or p2)
  we have to pick smaller, because  1. quicker to wrap up smaller by hunting in binary hunt way log(min(p1,p2)) 
  stopping point will be: when (arr1[p1-1] <= arr2[p2] and arr2[p2-1] <= arr1[p1]) becuase this ensures that left part ([0-p1) and [0-p2]) actually deserves to be in
  left portion(partition) on merged of 2 arrays.


    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size()) swap(nums1, nums2);
        int n1 = nums1.size();
        int n2 = nums2.size();
        int l = 0, r = n1;
        while(l <= r){
            int p1 = (l+r)/2;
            int p2 = (n1+n2+1)/2 - p1;
            
            int l1 = p1 > 0 ? nums1[p1-1] : INT_MIN;
            int r1 = p1 < n1 ? nums1[p1] : INT_MAX;
            int l2 = p2 > 0 ? nums2[p2-1] : INT_MIN;
            int r2 = p2 < n2 ? nums2[p2] : INT_MAX;
            
            if(l1 <= r2 && l2 <= r1){
                return (n1+n2)%2 ? max(l1,l2) : (max(l1,l2) + min(r1,r2))/2.0;
            }
            else if(l1 > r2) r=p1-1;
            else l = p1+1;
        }
        return -1;
    }

// T.C. : O( log(min(n1,n2)) )
// S.C. : O(1)
