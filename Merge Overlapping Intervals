/*given a list of intervals, return them in sorted order after merging the overlapping intervals({start,end}).
  Overlapping intervals are those which one of the point in the interval lie on another interval.
  I1(s1,e1)
  I2(s2,e2)
  -> I(s,e)
  Sample Input 1:
1
2
1 3
3 5
Sample Output 1:
1 5  

Sample Input 2:
3
5
1 3 6 8 10
4 5 8 9 12
10
1 2 3 1 9 5 11 7 12 14
3 7 5 8 10 11 12 10 12 17
7
1 4 2 5 6 2 8
2 6 7 6 9 11 12
Sample Output 2:
1 5
6 9
10 12
1 12
14 17
1 12

Approach:
brute: compare each pair if they are compatible to be merged, do that and sort them and return.
optimized: instead of checking for each pair. Sort the intervals based on end or start points. 
doing this will remove the trouble of possible surprise later with compatible intervals.
We see an interval, if s2<=e1 then take minimum of start points of last interval added in ans list. 
And make that start of new one and take max of end points of boths. And update the last iterval in this way.

#include <bits/stdc++.h> 
vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{
    int N = intervals.size();
    sort(intervals.begin(),intervals.end());
    vector<vector<int>>ans;
    for(int i=0;i<N;++i){
        if(ans.empty()) ans.push_back(intervals[i]);
        else{
            vector<int>&endInterval = ans.back();
            if(endInterval[1]>=intervals[i][0]){
                endInterval[0] = min(endInterval[0],intervals[i][0]);
                endInterval[1] = max(endInterval[1],intervals[i][1]);
            }
            else{
                ans.push_back(intervals[i]);
            }
        }
    }
    return ans;
}

T.C. : O(NlogN)
S.C. : output is considered then O(N) (for ans vector) else O(1)
