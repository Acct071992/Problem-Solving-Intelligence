/* Cycle Detection In Undirected Graph
   You have been given an undirected graph with 'N' vertices and 'M' edges. The vertices are labelled from 1 to 'N'.
   Your task is to find if the graph contains a cycle or not.
   A path that starts from a given vertex and ends at the same vertex traversing the edges only once is called a cycle.
Note:

1. There are no parallel edges between two vertices.

2. There are no self-loops(an edge connecting the vertex to itself) in the graph.

3. The graph can be disconnected.
For Example :

Input: N = 3 , Edges =  [[1, 2], [2, 3], [1, 3]].
Output: Yes

Explanation : There are a total of 3 vertices in the graph. There is an edge between vertex 1 and 2, vertex 2 and 3 and vertex 1 and 3. 
So, there exists a cycle in the graph. 

Sample Input 1:
1
3 2
1 2
2 3
Sample Output 1:
No
Explanation Of Sample Output 1:
 The above graph can be represented as 

There are a total of 3 vertices in the graph.There is an edge between vertex 1 and 2 and vertex 2 and 3. So, there is no cycle present in the graph. 
Sample Input 2:
2
4 0 
4 3
1 4
4 3
3 1
Sample Output 2:
No
Yes
*/

Approach:
  during traversal, if we reach at a node again, we can say it's a cycle.
  For undirected graph, we can reach at a node again, which is parent. to separate out that case we would remember the parent, and visited for others
  obviously.
  
bool dfs(vector<int>adj[], vector<bool>&vis, int node, int par){
    if(vis[node]){
        return true;
    }
    vis[node] = true;
    for(int v : adj[node]){
        if(v!=par){
            if(dfs(adj, vis, v, node)) return true;
        }
    }
    return false;
}
string cycleDetection(vector<vector<int>>& edges, int n, int m){
    if(n<3) return "No";
    vector<int>adj[n+1];
    for(int i=0;i<m;++i){
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v); adj[v].push_back(u);
    }
    vector<bool>vis(n+1,false);
    for(int i=1;i<=n;++i){
        if(!vis[i] && dfs(adj, vis, i, -1)) return "Yes";
    }
    return "No";
}

// T.C. : O(N)
// S.C. : max( O(N), O(E) )  : O(E) -> as we created adjacency graph, and O(N) -> as we created visited container.
