/* given array return the Longest Increasing Subsequence */

Sample Input 1:
1
6
5 8 3 7 9 1
Sample Output 1:
3
Explanation of Sample Input 1:
The longest increasing subsequence is 5 7 9, with length 3.
Sample Input 2:
1
16
1 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15
Sample Output 2:
6
Explanation of sample output 2:
The longest increasing subsequences are {1 2 6 9 13 15}, {1 4 6 9 13 15},  with length 6.
*/

Approach:
each element can belong to any subsequence possible.
So recursive approach needs to be taken. hence brute force will work but will take exponential time.
But here clearly overlapping subproblems can be seen. So DP is applicable.

#include <bits/stdc++.h> 
int LIS(vector<int> &heights, int n){
    vector<int>dp(n,1);
    int ans = 1;
    for(int i=1;i<n;++i){
        for(int j=i-1;j>=0;--j){
            if(heights[i]>heights[j]) dp[i] = max(dp[i], dp[j] + 1);
            ans = max(ans, dp[i]);
        }
    }
    return ans;
}

//T.C. : O(N^2)
//S.C. : O(N)
