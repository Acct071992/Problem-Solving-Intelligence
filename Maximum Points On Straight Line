// given array of coordinates, find the maximum number of points which can share a single line or can lie on single line.
/*
Sample Input 1:
2
2
1 1
5 5
6
-1 -1
0 0
1 1
2 2
3 3
3 4
Sample Output 1:
2
5 
*/

/*
Approach:
two points can share a single line or lie on single line iff (they have equal slope and share a common point) in getting the slope
Here we will prevent finding every pair combination. instead to meet the common points will try all lines linearly by fixing one point 
for getting slope in each iteration.
*/

#include<bits/stdc++.h>
int maxPointsOnLine(vector<vector<int>> &points, int n) {
    int maxi=0;
    for(int i=0;i<points.size();i++){
        unordered_map<double,int>ans;
        for(int j=0;j<points.size();j++){
            if(i!=j){
                double deltaX = points[i][0] - points[j][0];
                double deltaY = points[i][1] - points[j][1];
                double m = deltaX == 0 ? INT_MAX : deltaY/deltaX;
                int ct = ++ans[m];
                maxi = max(maxi,ct);
            }
        }
    }
    return maxi+1;
}

// T.C. : O(N^2)
// S.C. : O(N)
