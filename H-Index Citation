/*
Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.
According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that 
the given researcher has published at least h papers that have each been cited at least h times.

Example 1:

Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.
Example 2:

Input: citations = [1,3,1]
Output: 1
 

Constraints:

n == citations.length
1 <= n <= 5000
0 <= citations[i] <= 1000
*/

Approach:
    Arrange the input or process the input in such a way that bigger values are accessed first(descending order)
     at ith: if got a value which is bigger than or equal to number of already processed elements (abiding by citation rule), then return as that be max.
     But a catch is here (or exceptions) because 
    1. elements can be repeateting and much smaller by a dip, so number of bigger value processed could be ignored and
       smaller could be returned as ans.
    2. element can be very big, hence all can be left unmatched the condn. for that case size of array would be ans, as all were bigger than size.

    So both the situation can be taken cared of by using 1/2 extra variable to store number of processed elements and updated/maximized ans var to have required.

    So even if on meeting the condn, we will return the max of cur val(can be less) and number of element processed
    and secondly if array could have big numbers, so still ending loop will have ans updated with max of ans and min(x, number of elements processed)

    int hIndex(vector<int>& citations) {
        priority_queue<int>pq(citations.begin(), citations.end());
        int n = citations.size();
        int ans = 0, in=-1, bigCt = 0;
        while(!pq.empty()){
            int x = pq.top();
            ++bigCt;
            if(x <= bigCt) return max(x, ans);
            else ans = max(ans, min(bigCt, x));
            pq.pop();
        }
        return ans;
    }

// T.C. : O(N) as used Heap
// S.C. : O(N) extra container taken
