/* Given a matrix, rotate the array by 90 degree anticlockwise */

Sample Input 1:
2
3
1  2  3
4  5  6
7  8  9
4
1  2  3  4 
5  6  7  8 
9 10 11 12 
13 14 15 16
Sample Output 1:
3  6  9 
2  5  8 
1  4  7
4  8 12 16 
3  7 11 15 
2  6 10 14 
1  5  9 13
Explanation Of Input 1:
For, first test case, the given matrix has been rotated by 90 degrees in an anticlockwise direction as the first row is now the first column inverted and so on for second and third rows.

For, second test case, the given matrix has been rotated by 90 degrees in an anticlockwise direction as the first row is now first column inverted and so on for second, third and fourth rows.
Sample Input 2:
2
3
7  4  1 
8  5  2 
9  6  3
4
13  9  5  1 
14  10  6  2 
15 11 7 3 
16 12 8 4
Sample Output 2:
1  2  3
4  5  6
7  8  9
1  2  3  4 
5  6  7  8 
9 10 11 12 
13 14 15 16
*/

Approach:
  This transformation is same as putting mirror first by digonal and interchange elements across the mirror and then put mirror horizontally
  on mid of the row and interchange the elements accross the mirror.
  So first take transpose and then  swap the whole row and do this till mid of the row of the matrix.
  
#include <bits/stdc++.h> 
vector<vector<int>> rotateMatrix(vector<vector<int>> &matrix)
{
    for(int i=0;i<matrix.size();++i){
        for(int j=i+1;j<matrix.size();++j){
            swap(matrix[i][j], matrix[j][i]);
        }
    }
    for(int i=0;i<matrix.size()/2;++i){
        for(int j=0;j<matrix.size();++j){
            swap(matrix[i][j], matrix[matrix.size()-i-1][j]);
        }
    }
    return matrix;
}

//T.C. : O(N^2) 
//S.C. : O(1)
