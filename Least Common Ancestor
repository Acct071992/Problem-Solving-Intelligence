// LCA of Binary Tree
// given : root, u, v
// return the LCA of two nodes

Approach 1:
// reach u from root
// store the path till u in vector
// reach v from root 
// store the path till v in vector
// iterate from start of the vector
// return as soon it reaches last node till index after which nodes won't match. return this node.

#include <bits/stdc++.h> 
typedef BinaryTreeNode<int> BTN;
//reaching the node
bool reach(BTN *root, BTN *x, vector<BTN*>&path){
    if(!root) return false;
    path.push_back(root);
    if(root==x) return true;
    // return as soon as you found the node
    if(reach(root->left,x,path)) return true;
    if(reach(root->right,x,path)) return true;
    //pop as current node's left and right subtree didn't have the required node.
    path.pop_back();
    return false;
}
BinaryTreeNode<int>* findLCA(BTN* root, BTN* u, BTN* v) {
    if(!root) return nullptr;
    if(u==v) return u;
    vector<BTN*>pathU, pathV;
    reach(root,u,pathU);
    if(pathU.back()!=u) return nullptr;
    reach(root,v,pathV);
    if(pathV.back()!=v) return nullptr;
    int i=0;
    while(i<pathU.size() && i<pathV.size()){
        //we reached node after which nodes won't match which is LCA, return
        if(pathU[i]!=pathV[i]) return pathU[i-1];
        ++i;
    }
    return i==pathU.size() ? pathU.back() : pathV.back();  //this means if u/v lies in the subtree of v/u 
}

//T.C. : O(N)
//S.C. : O(N)

/***********************************Approach 2*********************************/
//here, we will try reducing space as well time trade-offs
//during traversal of tree, we are at a node:
//if found that both the searching nodes(u,v), found (collectively) : i.e. from self, left-subtree or right-subtree at the earliest. 
// that's the LCA node.

#include <bits/stdc++.h> 
typedef BinaryTreeNode<int> BTN;
pair<bool,bool> getLCA(BTN *root, BTN *u, BTN *v, BTN **ans){
    if(!root) return {false,false};
    bool uFound = false, vFound = false;
    if(root==u) uFound = true;
    else if(root==v) vFound = true;
    pair<bool,bool> lstatus = getLCA(root->left,u,v,ans);
    pair<bool,bool> rstatus = getLCA(root->right,u,v,ans);
    uFound |= lstatus.first | rstatus.first;
    vFound |= lstatus.second | rstatus.second;
    if(uFound & vFound & *ans==nullptr) *ans = root;
    return {uFound, vFound};
}
BinaryTreeNode<int>* findLCA(BTN* root, BTN* u, BTN* v) {
    if(!root) return nullptr;
    if(u==v) return u;
    BTN *ans = nullptr;
    getLCA(root,u,v,&ans);
    return ans;
}

// T.C. : O(N) : compare to Approach 1: we saved on whole recursive iteration and additional vector iteration.
// S.C. : O(1) : we didn't use any additional variable DS
